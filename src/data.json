[
    {
        "id": 1,
        "title": "리액트",
        "content": "사용자 인터페이스를 만들기위한 자바스크립트 라이브러리.\n 1. 페이스북 메타가 지원.\n 2. JSX 사용 \n 3. 화면의 모든 구성이 컴포넌트로 되어있다.\nfunction Book(props) {\n    return (\n        <div>\n            <h1>{`이 코드는 ${props.name} 이다`}</h1>\n        </div>\n    )} "  
    },
    {
        "id": 2,
        "title": "Element",
        "content": 
        "Elements are the smallest building blocks of React apps. \n 리액트 앱을 구성하는 가장 작은 빌딩 블록들. \n 1. DOM Element 화면에 나타나는 내용을 기술하는 자바스크립트 객체 \n 2. 화면에 보여주려면 렌더링을 해야하고, 생성된 Element는 변경이 불가능하다.  \n 3. 조건부 렌더링을 하면 보여주고 싶은 Element를 조절 할 수 있다. \n 4. 리액트에선 Virtual DOM을 사용 실제 브라우저에서 발생하는 연산을 줄여줘 빠르다. \n\nfunction Clock(props) {\n    return (\n        <div>\n            <h2>현재 시간 : {new Date().toLocaleTimeString()}</h2> \n        </div>\n    ); // 현재시각을 띄우는 Element\n}"  
    },
    {
        "id": 3,
        "title": "Component and Props",
        "content": "리액트의 페이지는 컴포넌트들로 이루어져있다. \n 이 컴포넌트 안에 컴포넌트가 들어가며 구조를 이룬다. \nProps \nprop - property  + s \n속성, Component의 속성들이다.   Props -> Component -> Element \n하위 컴포넌트에 전달되는 정보. \n상위에서 전해져 온 값이므로, 하위의 컴포넌트에서 Props 값에대한 직접 편집이 불가능하다. "  
    },
    {
        "id": 4,
        "title": "State and LyfeCycle",
        "content": "State \n 컴포넌트의 상태. -> 컴포넌트의 변경 가능한 데이터. \n 일반적으로 Props로 받아온 정보들은 컴포넌트 내부에서 바꿀 수 없다. 이럴때 State 사용. \n\n State의 상태를 Props로 하위 컴포넌트에 전달하면 Props Drilling 발생. 상태 관리 방법 사용\n  Redux / Recoil / Hooks(useRecuder , useContext) \n \nLifeCycle 이란 \n 컴포넌트의 생성 변경 소멸의 과정에서 호출되는 함수.\n 원하는 시점에 원하는 기능을 구현할 수 있다.\n\n 컴포넌트의 생명 주기별 실행 함수 : \n Mounting : constructor(), render(), ComponentDidMount() \n Updating : ComponentDidUpdate() \n Unmounting : componentWillUnmount()"  
    },
    {
        "id": 5,
        "title": "Event",
        "content": "<button onClick= {}> 과 같이 사용자의 액션을 받아. 액션을 실행한다." 
    },
    {
        "id": 6,
        "title": "Hooks",
        "content": "1.useState\n State의 관리 \nconst [ 변수명 , set함수명 ] = useState(초기값); \n각각의 변수마다 set 함수를 만들어 준다. \n\n2. useEffect\n 라이프사이클의 기능을 함수컴포넌트에서 구현, 의존성 배열의 변경시 실행.\n  1)useEffect(이펙트 함수, 의존성 배열);\n배열 안의 변수중 하나라도 값이 변경되었을 때 이펙트 함수가 실행된다.\n\n  2)만약 Effect 함수를 mount 와 unmount 에 한번만 실행하고 싶다면\n useEffect(이펙트 함수,[]);\n의존성 배열에 빈 배열을 넣으면 props 나 state에 의존되지 않으므로, 여러번 실행되지 않는다 \nmount 시 기본 함수 실행, unmount 시 return 안에 함수 실행\n\n  3)만약 업데이트시마다 사용하고 싶다면.\n useEffect(이펙트 함수);\n의존성 배열에 아무것도 선언되어있지 않으면, 컴포넌트 업데이트때 마다 호출됨\n\n3.useContext\nexport const definecontext = createContext();\n\nreturn \n   <definecontext.Provider value={}>\n       {children}\n    </definecontext>\n형식으로 동일값을 사용할 상위 컴포넌트에서 하위 컴포넌트 호출 시 provider로 묶어서 사용4.useNavigete\n라우팅 될 주소를 설정한다.\n const navigate = useNavigate(); \n navigate(`/address`);\n\n5.CustomHooks\n사용자의 필요에 따라, 자주 사용되는 연산이나 유사한 기능을 묶어 제공"  
    }
]